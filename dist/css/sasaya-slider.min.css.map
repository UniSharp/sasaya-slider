{"version":3,"sources":["sasaya-slider.scss","../../bower_components/bootstrap/scss/mixins/_clearfix.scss","../../bower_components/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAKA,eAGE,MAAA,KACA,SAAA,SAJF,sBCHI,QAAA,GACA,QAAA,MACA,MAAA,KDCJ,iBAOI,MAAA,KACA,QAAA,EACA,OAAA,EACA,WAAA,WAVJ,uBAeM,MAAA,QAfN,mBAmBM,WAAA,MAAA,KAAA,YEqBF,yBFxCJ,qBAyBM,iBAAA,KACA,SAAA,SACA,IAAA,MACA,KAAA,EACA,OAAA,IACA,MAAA,KACA,QAAA,GA/BN,wBAqCM,SAAA,SACA,MAAA,KACA,OAAA,MACA,IAAA,EACA,QAAA,EACA,WAAA,OACA,OAAA,QA3CN,4BA+CM,KAAA,EA/CN,0BA6DM,UAAA,KACA,OAAA,MACA,YAAA,MACA,YAAA,EAAA,IAAA,IAAA,eAhEN,qBAAA,qBAqEI,OAAA,MACA,SAAA,OACA,SAAA,SE/BA,yBFxCJ,4BAoDQ,KAAA,iBApDR,qBAAA,qBA0EM,MAAA,MA1EN,2BAAA,2BA8EM,SAAA,SACA,MAAA,KACA,gBAAA,MACA,oBAAA,IACA,kBAAA,UAlFN,6BAAA,6BAqFQ,QAAA,aACA,MAAA,KACA,QAAA,KAvFR,yCAAA,yCA2FQ,SAAA,SACA,iBAAA,gBACA,MAAA,KACA,KAAA,EACA,OAAA,EACA,QAAA,KAhGR,4CAAA,4CAAA,4CAAA,4CAmGU,MAAA,KAnGV,2BAAA,6BAgHQ,OAAA,MAhHR,4CAoHQ,WAAA,EACA,cAAA,ME7EJ,yBFxCJ,qBA2GM,MAAA,IA3GN,qBAgIM,MAAA,KE3EF,yBFrDJ,4CAwHU,UAAA,OAxHV,qBAwIM,QAAA,MAxIN,2BA+JM,cAAA,IAAA,MAAA,KE1GF,yBFrDJ,4BAwDQ,MAAA,EAxDR,qBAoIM,OAAA,MApIN,2BA6IQ,MAAA,IACA,OAAA,OA9IR,2BAAA,6BAkJQ,OAAA,MAlJR,4CAuJU,UAAA,SAvJV,4CA2JU,QAAA","file":"sasaya-slider.min.css","sourcesContent":["@import \"variables\";\n@import \"bower_components/bootstrap/scss/variables\";\n@import \"bower_components/bootstrap/scss/mixins/clearfix\";\n@import \"bower_components/bootstrap/scss/mixins/breakpoints\";\n\n.sasaya-slider {\n  @include clearfix;\n\n  width: 100%;\n  position: relative;\n\n  * {\n    color: #fff;\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n\n  a {\n    &:hover {\n      color: #72dde2;\n    }\n\n    * {\n      transition: color .25s ease-in-out;\n    }\n  }\n\n  .mask {\n    @include media-breakpoint-up(md) {\n      background-color: #fff;\n      position: absolute;\n      top: $slider-height - 1px;\n      left: 0;\n      height: 1px;\n      width: 100%;\n      z-index: 5;\n    }\n  }\n\n  .arrow {\n    > * {\n      position: absolute;\n      width: $arrow-handler-width;\n      height: $slider-height;\n      top: 0;\n      z-index: 8;\n      text-align: center;\n      cursor: pointer;\n    }\n\n    .prev {\n      left: 0;\n    }\n\n    .next {\n      @include media-breakpoint-up(md) {\n        left: calc(#{$main-width} - #{$arrow-handler-width});\n      }\n\n      @include media-breakpoint-down(sm) {\n        right: 0;\n      }\n    }\n\n    .fa {\n      font-size: 30px;\n      height: $slider-height;\n      line-height: $slider-height;\n      text-shadow: 0 1px 7px rgba(0,0,0,.9);\n    }\n  }\n\n  .main, .list {\n    height: $slider-height;\n    overflow: hidden;\n    position: relative;\n\n    @include media-breakpoint-up(md) {\n      float: left;\n    }\n\n    .item {\n      position: absolute;\n      width: 100%;\n      background-size: cover;\n      background-position: 50%;\n      background-repeat: no-repeat;\n\n      a {\n        display: inline-block;\n        width: 100%;\n        padding: 10px;\n      }\n\n      .text-wrapper {\n        position: absolute;\n        background-color: rgba(0,0,0,0.57);\n        width: 100%;\n        left: 0px;\n        bottom: 0px;\n        padding: 10px 10px;\n\n        h1, h4 {\n          color: #fff;\n        }\n      }\n    }\n  }\n\n  .main {\n    @include media-breakpoint-up(md) {\n      width: $main-width;\n    }\n\n    .item {\n      &, a {\n        height: $slider-height;\n      }\n\n      .text-wrapper h1 {\n        margin-top: 0;\n        margin-bottom: 0.5rem;\n\n        @include media-breakpoint-down(xs) {\n          font-size: 1.8rem;\n        }\n      }\n    }\n  }\n\n  .list {\n    @include media-breakpoint-up(md) {\n      width: $list-width;\n    }\n\n    @include media-breakpoint-down(sm) {\n      height: $thumb-height;\n    }\n\n    @include media-breakpoint-down(xs) {\n      display: none;\n    }\n\n    .item {\n      @include media-breakpoint-down(sm) {\n        width: 50%;\n        height: $thumb-height;\n      }\n\n      &, a {\n        height: $thumb-height;\n      }\n\n      .text-wrapper {\n        h1 {\n          font-size: 1.125rem;\n        }\n\n        h4 {\n          display: none;\n        }\n      }\n\n      border-bottom: 1px solid white;\n    }\n  }\n}\n\n// .slider .main .item .de_category-tag,\n// .slider .list .item .de_category-tag {\n//   position: absolute;\n// }\n","@mixin clearfix() {\n  &::after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 544px, md: 768px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))\n//    544px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.1.\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))\n//    767px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  @include media-breakpoint-up($name, $breakpoints) {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  @include media-breakpoint-up($lower, $breakpoints) {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}